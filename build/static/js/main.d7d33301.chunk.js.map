{"version":3,"sources":["CheckoutForm.js","App.js","index.js"],"names":["CheckoutForm","useState","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","useStripe","elements","useElements","useEffect","window","fetch","method","then","res","json","data","toast","success","handleChange","event","a","empty","message","handleSubmit","ev","preventDefault","confirmCardPayment","payment_method","card","getElement","CardElement","payload","style","display","justifyContent","alignItems","src","alt","height","width","id","className","onSubmit","options","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","onChange","role","promise","loadStripe","process","App","ReactDOM","render","document","getElementById"],"mappings":"wOAsIeA,G,MA7HM,WACnB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAwCR,mBAAS,IAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACMC,EAASC,sBACTC,EAAWC,wBAGjBC,qBAAU,WACRC,OACGC,MAAM,yBAA0B,CAC/BC,OAAQ,SAETC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJZ,EAAgBY,EAAKb,mBAExB,IAGHM,qBAAU,WACJd,GACFsB,IAAMC,QAAQ,wBAEf,CAACvB,IAEJ,IAmBMwB,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAGnBnB,EAAYkB,EAAME,OAClBxB,EAASsB,EAAMvB,MAAQuB,EAAMvB,MAAM0B,QAAU,IAJ1B,2CAAH,sDAOZC,EAAY,uCAAG,WAAMC,GAAN,eAAAJ,EAAA,6DACnBI,EAAGC,iBACH1B,GAAc,GAFK,SAIGK,EAAOsB,mBAAmBxB,EAAc,CAC5DyB,eAAgB,CACdC,KAAMtB,EAASuB,WAAWC,kBANX,QAIbC,EAJa,QAUPnC,OACVC,EAAS,kBAAD,OAAmBkC,EAAQnC,MAAM0B,UACzCvB,GAAc,KAEdF,EAAS,MACTE,GAAc,GACdJ,GAAa,IAhBI,2CAAH,sDAoBlB,OACE,oCACA,yBACEqC,MAAO,CAACC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WAC/D,yBACEC,IAAI,eACJC,IAAI,OACJC,OAAO,KACPC,MAAM,SAGV,uBAAGC,GAAG,SAAQ,6CAAd,yBACA,yBAAKC,UAAU,WACb,mCACA,yBAAKA,UAAU,gBAGjB,0BAAMD,GAAG,eAAeE,SAAUnB,GAEhC,kBAAC,cAAD,CACEiB,GAAG,eACHG,QAnEY,CAChBX,MAAO,CACLY,KAAM,CACJC,MAAO,UACPC,WAAY,oBACZC,cAAe,cACfC,SAAU,OACV,gBAAiB,CACfH,MAAO,YAGXI,QAAS,CACPH,WAAY,oBACZD,MAAO,UACPK,UAAW,aAsDXC,SAAUjC,IAGZ,4BAAQlB,SAAWF,GAAcE,GAAYN,GAC3C,0BAAM8C,GAAG,eACP1C,EACA,yBAAK2C,UAAU,UAAUD,GAAG,YAE5B,YAMH5C,GACC,yBAAK6C,UAAU,aAAaW,KAAK,SAC9BxD,GAKL,kBAAC,IAAD,UCtHAyD,G,MAAUC,YAAWC,gHAEZ,SAASC,IACtB,OACE,yBAAKf,UAAU,OACb,kBAAC,WAAD,CAAUrC,OAAQiD,GAChB,kBAAC,EAAD,QCZRI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d7d33301.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst CheckoutForm = () => {\r\n  const [succeeded, setSucceeded] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [processing, setProcessing] = useState('');\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [clientSecret, setClientSecret] = useState('');\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  // Create PaymentIntent as soon as the page loads\r\n  useEffect(() => {\r\n    window\r\n      .fetch(\"/create-payment-intent\", {\r\n        method: \"POST\"\r\n      })\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        setClientSecret(data.clientSecret);\r\n      });\r\n  }, []);\r\n\r\n  // Open up a toast to a successful payment\r\n  useEffect(()=> {\r\n    if (succeeded) {\r\n      toast.success('Payment succeeded!')\r\n    }\r\n  }, [succeeded])\r\n  \r\n  const cardStyle = {\r\n    style: {\r\n      base: {\r\n        color: \"#32325d\",\r\n        fontFamily: 'Arial, sans-serif',\r\n        fontSmoothing: \"antialiased\",\r\n        fontSize: \"16px\",\r\n        \"::placeholder\": {\r\n          color: \"#32325d\"\r\n        }\r\n      },\r\n      invalid: {\r\n        fontFamily: 'Arial, sans-serif',\r\n        color: \"#fa755a\",\r\n        iconColor: \"#fa755a\"\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = async (event) => {\r\n    // Listen for changes in the CardElement\r\n    // and display any errors as the customer types their card details\r\n    setDisabled(event.empty);\r\n    setError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n  const handleSubmit = async ev => {\r\n    ev.preventDefault();\r\n    setProcessing(true);\r\n\r\n    const payload = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement)\r\n      }\r\n    });\r\n\r\n    if (payload.error) {\r\n      setError(`Payment failed ${payload.error.message}`);\r\n      setProcessing(false);\r\n    } else {\r\n      setError(null);\r\n      setProcessing(false);\r\n      setSucceeded(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <> \r\n    <div\r\n      style={{display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n      <img\r\n        src=\"/ukraine.png\"\r\n        alt=\"flag\"\r\n        height=\"87\"\r\n        width=\"100\" \r\n      />\r\n    </div>\r\n    <p id='title'><b>Help Ukraine, </b>one coffee at a time.</p>\r\n    <div className=\"tooltip\">\r\n      <h1>$ 5</h1>\r\n      <div className=\"arrow-down\"></div>\r\n    </div>\r\n\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n\r\n      <CardElement \r\n        id=\"card-element\" \r\n        options={cardStyle} \r\n        onChange={handleChange} \r\n      />\r\n\r\n      <button disabled={ processing || disabled || succeeded }>\r\n        <span id=\"button-text\">\r\n        { processing ? (\r\n          <div className=\"spinner\" id=\"spinner\"></div>\r\n        ) : (\r\n          \"Pay now\"\r\n        )}\r\n        </span>\r\n      </button>\r\n\r\n      {/* Show any error that happens when processing the payment */}\r\n      {error && (\r\n        <div className=\"card-error\" role=\"alert\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {/* Show a success message upon completion */}\r\n      <ToastContainer />\r\n    </form>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default CheckoutForm","import React from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport CheckoutForm from \"./CheckoutForm\";\nimport \"./App.css\";\n\n\n// Make sure to call loadStripe outside of a componentâ€™s render to avoid\n// recreating the Stripe object on every render.\n// This is your test publishable API key.\nconst promise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Elements stripe={promise}>\n        <CheckoutForm />\n      </Elements>\n    </div>\n  );\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}